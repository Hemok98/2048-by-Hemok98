Кароче. Как примерно всё устроенно. 
Есть кароче класс 'MainForm' и его объект инициализируется при запуске программы и тип является её главным звеном.
По факту объект класса 'MainForm' - это как-бы контейнер включающий всякую фигню. У этого элемента есть куча всяких параметров, которыми можно регулировать саму форму,размер её и цвет.
Всякая фигня на форму добавляется как поле класса, а так же потом отдельно добавляется на неё для отображения, становится её контролом.(как бы кладётся в контейнер формы).

Теперь с примеры и на файлах. Есть у нас папочка 'Form', в ней описан интерфейс и его взаимодействие с самой игрой. 
Есть папочка 'MainPanel', в ней описана главная панелька и лежащие на ней элементы и их взаимодействие. Так же описывается сама форма и её параметры.
Для удобства в файле .Designer задаётся отображение интерфейса, а в файлах .Action (в MainPanel, он просто MainPanel из-за вижуалки и её устройства) описано взаимодействие.
Для каждого действия на форме созданы панельки(Panel) - panel1,panel2,panel3,panel4 - но вообще их надо объеденить в общий массив для лучшего перехождения по ним и взаимодействия с ними.
И они тоже являются контейнерами, и тип они как бы контейнеры внутри контейнера. Вот такие приколы.

Идём дальше. При объявлении каких-либо объектов, мы можем задать обработку каких либо событий этих объектов.
Вот допустим у нас есть кнопка upButton(деды научили называть все переменный с маленькой буквы, не использовать в названии нижнее подчёркивание между словами,
а просто начинать каждоеНовоеСлово с большое буквой. При её инициализации мы к её событий клик добавляем функцию обработки.
this.upButton.Click += new System.EventHandler(this.MoveButtonClick);
Идём смотреть процедуру MoveButtonClick (Деды сказали что все методы, процедуры и функции называть с большой буквы и там каждое новое слово с большой буквы, аналогично).
Чё она там делает то???
private void MoveButtonClick(object sender, EventArgs e)
{
}
Видим что она принимает некий сендер типа объект, и список параметров.
Этот сендер, это и есть наша кнопка и мы объявляем новую переменную типа кнопка и говорим что она теперь указывает вот ту кнопку, которая нам пришла сендером.
Дальше через свитч мы смотрем что это была за кнопка и выполняем относительно её действие.
case "upButton":
                {
                    this.game.Move(Movement.UP, ref x, ref y);
                    break;
                }
шо это за такое this.game.Move() и откуда оно взялось.
Хммм.

У нас есть самописный класс Game который отвечает за всю игровую логику, и он является полем нашей формы(тип как бы частью нашей формы, объявлен в ней).
private Game game = new Game();

В нём есть куча своих методов и полей которые управляют механикой самой игры и хранят все её данные. Это как бы ядро, которое можно переносить и привинчивать к другому граффическому движку.
Воот. Из важного тут.
private Cells[,] cellsContainer = new Cells[MAXCELLS, MAXCELLS]; тута хранится само игровое поле
private Cells[,] copyCellsContainer = new Cells[MAXCELLS, MAXCELLS]; тут его копия для хода назад
private int steps = 0; счётчик ходов
private int score = 0; счётчик счёта (ух сука, тафтология)
private int record тута храним рекорд и сохраняем его в настройки проекта(такая фигня, которая вшита в экзешник и тип её можно изменять и доставать каждый раз)

public void RestartGame() перезапуск игры

public void Move(Movement direction, ref int x, ref int y) ход вправо, влево, вверх, вниз. Основная механика игры. Сюда кста нужно допилить проверку того, что Game Over. Ты проиграл лошара.

public void Output(TButton[,] displayMassive, Label stepsDisplay, Label scoreDisplay, Label recordDisplay, Label x2PriceDisplay, Label deletePriceDisplay, Label backPriceDisplay) вывод всего в интерфейс
(нужно переписать работу с пересылом данных, мне она не нрав)

public void SelectActivatedSkill(Skills skill) вызывается при нажатии на использование скила

public bool UseSkill(int str, int column) обрабатывает сами скилы, надо добавить ещё скилов


public void SaveGame(int saveNumber)
					сохранение и загрузка. Сделанно оч криво шо пиздец, тупо костыль огромный, но робит. Хз как переделать пока, так шо нетрогаем
public int LoadGame(int loadNumber)